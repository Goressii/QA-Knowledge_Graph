Onboarding Unity 

Адаптация разработчика 

 

Рады видеть вас в команде! 

 

Если у вас во время работы возникнут  вопросы, проверьте сначала информацию в этом 
документе. Мы ее постоянно обновляем, чтобы этот документ стал для вас  действительно 
полезным. 

 

2024 

  

Содержание 

Основные контакты 3 

Организационная информация 3 

Оформление договора 3 

Выплаты 6 

Отчетность 7 

Процесс разработки и принятия проектов 9 

Требования по разработки 9 

Технические требования iOS 10 

Технические требования Unity 10 

Технические требования Android 10 

Работа с GitHub 10 

Работа с контентом 11 
Требования по дизайну 12 

Экспорт файлов из макета 12 

Шрифты 12 

Функционал, которого не должно быть в проекте 12 

Соответствие дизайна 13 

Чек-лист при работе с дизайном 14 

Тестирование (QA) 15 

* Обязательно для ознакомления перед началом работы над проектом. 16 

Дополнительные правила рефакторинга 16 

 

  

  
Основные контакты

  
  
Организационная информация 

  

Первые шаги после подписания NDA 

  

   1. Необходимо  зарегистрироваться  на  сервисах  и  сделать  все  по  инструкции 
      Onboarding 

  
   1. Ознакомьтесь с  проектом. 

  

a.    Сделайте эстимейт  (декомпозицию) проекта,  согласуйте  его  с  вашим  ПМом, 
после  ПМ вернется с обратной связью. 
b.    Если есть вопросы, на которые вы не получили ответ от Project Manager или Tech 
Lead, напишите непосредственно BA
c.    Для получении следующего проекта необходимо обратиться к вашему ПМу 

  

   1. Все вопросы, возникающие в ходе проекта, пишите вашему Project Manager. Если 
      вопросы связаны с технической частью, то пишите в канал в слаке ios-dev-faq или 
      unity-dev-faq,  в  них  находятся  все  разработчики  по  направлению  и  Tech  Leads, 
      которые смогут помочь в решении вопроса.  

  

   1. ТЗ проекта – это документ, включающий в себя требования по разработке, новый 
      дизайн   проекта   в    Figma,   исходный    код   проекта    (референс). 
      Весь  функционал,  который  должен  быть  реализован,  мы  берем  из  референса, 
      обязательно установите его, вам нужно внимательно посмотреть и понять принципы 
      его работы.  

  

     Если нет исходного кода, напишите вашему Project Manager 

  

     Если чего-то не хватает в дизайне или контенте, нужно сразу собрать это в список и 
      отправить вашему  Project Manager. 

  

     Если  в  течении  15  минут  вам  не  ответили,  обращайтесь  непосредственно  к  БА 
      @Denis Kosarev. 

  

   1. Инструменты, с которыми мы работаем: 

  

     Discord (дописать) 
     Jira (инструкция) 

  

   1. Дважды  в  день  бот  отправляет  уведомление  с  просьбой  заполнить  отчет  в  канал 
      вашей команды. Более подробную информацию смотрите в пункте Отчетность. В 
      сообщении указана информация, которую нужно предоставить. Заполнение таких 
      отчетов обязательно. 

  

   1. Если видите, что не попадаете в согласованные эстимейты, сразу сообщите об этом 
      вашему Project Manager 

  

Выплаты 

  

Для получения оплаты за проект нужно получить апрув на сданный проект и в течении 1 
рабочего дня информация передается в отдел бухгалтерии. Оплата производится в течении 
5  рабочих  дней,  с  момента  подписания  акта  выполненных  работ.  Объем  выплат  за 
дополнительные работы согласуется с БА. Перед доп. работой необходимо 
получить подтверждение на выполнение таких работ, сроки, стоимость и только после этого 
приступать к выполнению. 

  

Перед  началом  работы  над  проектом – необходимо  согласовать  декомпозицию  с  Project 
Manager. Это шаблон, где будет указано: 

     описание и объем работ; 
     цена проекта; 
     срок выполнения с конкретными датами 

Для получения выплаты за проделанную работу вам необходимо: 

  

   1. Сделать верстку проекта 
   2. Доработать логику и экраны (по необходимости) 
   3. Проверить проект на наличие видимых багов и передать на тестирование 
   4. Поправить проект по баг репорту 
   5. Отправить на повторное тестирование 
   6. Начать рефакторить проект, когда по проекту осталось до 3 багов  
   7. Отправить проект на тестирование после рефакторинга 
   8. Поправить проект по баг репорту 
   9. БА принимает проект 
   10. Разработчик проверяет проект на релизном компьютере 
   11. Подписать Акт выполненных работ с компанией 

Отчетность 

  

Дважды в день (8:50 и 17:50) в канале вашей  команды, Chatbot будет отправлять сообщения 
со списком вопросов. В обсуждении к этому сообщению, необходимо заполнить отчет по 
структуре, которую предоставляет ChatBot. 

  

Отчеты необходимо заполнять утром до 9:20 и вечером до 18:20. 

  

Пример сообщения утреннего отчета (Morning Daily Report): 

Всем привет! 

Не забудьте написать отчет! 

  

Отчет должен содержать: 

1. Какие задачи на сегодня? 

2. Время завершения 

3. Какие есть блокеры? 

  

Пример сообщения вечернего отчета (Evening Daily Report): 

Добрый вечер! 

Не забудьте написать отчет! 

  
Отчет должен содержать: 

1. Какие задачи были завершены 

2. Какие задачи не были завершены и почему?  

3. Какие есть блокеры? 

  

ШТРАФНЫЕ САНКЦИИ по отчетности: 

  

Если в течение 2 дней (кроме выходных) отчеты не заполняются и TL не видит ни одного 
коммита и пуша на GitHub – накладывается штраф в размере 10% (от стоимости проекта). 

Под штраф попадают каждые след. 2 дня, когда разработчик не заполняет отчет и не делает 
коммит и пуш на GitHub! И это должен быть коммит и пуш с прогрессом по проекту, а не 
пустой коммит и пуш для вида! Если разработчик больше недели не выходит на связь – 
компания  имеет  право  искать  другого  разработчика  на проект  и  расторгнуть 
сотрудничество с разработчиком без каких-либо компенсаций.  

Если вы отсутствуете по уважительным причинам, то об этом должен знать  PM вашего 
проекта! 
Процесс разработки и принятия проектов 

Требования по разработки 

  

Разработка распределяется на ключевые этапы: 

  

   1. Анализ  существующей  информации  по  проекту,  проверка  чего  не  хватает  по  тз, 
      макету, контенту, сбор всей необходимой информации, ресерч. 

  

   1. Создание декомпозиции проекта. 

  
   1. Редизайн. Проект уже имеет рабочий исходный код, необходимо сделать редизайн 
      (сверстать новый дизайн приложения на существующий исходный код). 

  

   1. Адаптация кода под новую структуру контента. В каждом проекте мы используем 
      уникальную  структуру  Json  файла  для  контента. Соответственно  вам  нужно 
      изменить код, который отвечает за парсер контента. 

  

   1. Рефакторинг  –  уникализация   исходного  кода.  Для   этого  используем 
      сервис  Apprefactoring подробнее в инструкции по аппрефакторингу. Ознакомьтесь 
      с ней до начала работы над проектом. 

  

   1. Тестирование проекта - дописать 

  

   1. Сдача  проекта - передача  проекта  на  аппрув,  финальная  приемка  проекта  Бизнес 
      аналитиком и его запуск на заливочном ПК, подтверждение оплаты за проделанную 
      работу. 

  

Технические требования iOS 

  

   1. Минимальная версия iOS - 15.0 

   2. Технический стэк: 

     Язык Swift 
     Архитектура MVC/MVVM/MVP. 
     Локальная база данных Realm или CoreData. 
     In App Purchases - Только StoreKit v1!!! 
     Интерфейс без storyboard. Разрешены Xib/SnapKit. 

   1. Приложение должно поддерживать iPhone и iPad 

   2. Приложение должно соответствовать следующим требованиям: 
     Код  не имеет  никаких  методов,  библиотек,  менеджеров  или  других  элементов, 
      связанных с подписками. 
     Файл  конфигурации  не  содержит  переменных  с  идентификаторами  подписки  и 
      секретными ключами. 
     Нет разрешений в файле Info.plist на фоновые процессы, которые не используются в 
      функционале программы. 
     Полная интеграция реализована для следующих библиотек: “Pushwoosh”, “Adjust”, 
      ATT Alert. 

  

Технические требования Unity 

  

   1. Минимальная версия iOS - 15.0 

   2. Технический стэк 

     язык C# 
     Unity 2022 LTS 
     In App Purchases - Unity IAP 
     Интерфейс uGUI/UI Builder 

 

3. Приложение должно поддерживать iPhone и iPad 

4. Приложение должно соответствовать следующим требованиям 

     Код  не  имеет  никаких  методов,  библиотек,  менеджеров  или  других  элементов, 
      связанных с подписками. 
     Файл  конфигурации  не содержит  переменных  с  идентификаторами  подписки  и 
      секретными ключами. 
     Нет разрешений в файле Info.plist на фоновые процессы, которые не используются в 
      функционале программы. 
     Полная интеграция реализована для следующих библиотек: “Pushwoosh”, “Adjust”, 
      ATT Alert. 

  

Работа с GitHub 

  

Доступ к репозитории выдается на этапе начала работ проекта. 
  

При работе с репозиторием есть ряд правил которые обязательны к соблюдению: 

  

   1. Вся  работа  над  проектом  осуществляется  ТОЛЬКО  в  рамках  корпоративного 
      репозитория 

   o  Запрещено, создавать личные репозитории с исходным кодом проекта 
   o  Запрещено, передавать код проекта и наработки архивом через личные сообщения 
      Discord или любой другой способ связи. (Исключение: Прямой запрос БА, Product 
      Owner, Jira Administrator, Tech Lead) 
   o  Запрещено,  передавать  кому-либо  доступ  к  своей  учетной  записи  GitHub. 
      (Исключение: Прямой запрос БА, Product Owner, Jira Administrator) 
   o  Запрещено, публиковать исходный код или его фрагменты в открытом или закрытом 
      доступе. 

   5. Ваш login (nickname) на GitHub, должен быть написан по формату Имя_Фамилия 

   6. В репозитории проекта - нельзя пушить main  ветку - чтобы корректно работать с 
      проектом,  вам  необходимо:  Создать  ветку  DEV - где  хранится  основной  билд 
      проекта 

   7. Коммит и пуш актуальной версии проекта, должен быть не менее чем 1 за рабочий 
      день. 

  

В случае возникновения блокеров при работе с GitHub - обратитесь к вашему ПМ-у. 

Базовая инструкция по работе с GitHub 

  

Работа с контентом 

  

Общая инструкция по работе с Контентом. 

Весь  контент  должен  динамически  подтягиваться  с  Dropbox.  Для  этого  есть  следующие 
шаги: 

  

   1. Получаете контент вместе с проектом 
  

   1. Проверяете его на корректность (Чек Лист проверки приведен ниже) 

  

   1. Если что-то не корректно, то передавайте правки вашему ПМу с четкими примерами, 
      что  и  где  должно  быть  добавлено/удалено/отредактировано  (скрины,  конкретные 
      файлы джейсона или ломаные файлы с элементами). 

  

   1. Подключайтесь к дропбоксу и проверьте, все ли корректно извлекается. 

  

   1. Если  в  файлах  нужно  что-то  изменить,  добавить,  перезалить,  удалить - 
      проинформируйте об этом своего ПМа. 

  

Подключение Dropbox в коде приложения: 

Видео-инструкция 

 
Требования по дизайну 

  

Экспорт файлов из макета 

Все  элементы  в  дизайне  (иконки,  кастомные  элементы,  фоны,  и  другое)  должны  быть 
загружены в хорошем качестве. Иконки нужно загружать в формате .png х4. Если элемент 
можно сделать кодом, такой как, например: градиент, то не нужно качать его картинкой, 
потому что качество будет гораздо лучше, если прописать в коде. 

  

Шрифты 

Обязательно соблюдать соответствие размеров и категорий шрифтов (medium, light, bold). 
С фигмы скачать шрифты невозможно. Необходимо найти шрифт в интернете и сохранить 
в файлы проекта 
  

Функционал, которого не должно быть в проекте: 

     FAQ 
     Share app 
     Rate us 
     Change language 
     Contact 
     Support 
     Manage 
     Bug report 
     About 
     Соцсети 
     Изменение темы 
     Любые социальные взаимодействия (рейтинги, отзывы, коммьюнити и т.д.) 
     Если ты заметил у себя в проекте эти разделы, сообщи своему PM 

  

Соответствие дизайна 

Все  отступы,  закругления,  размеры  элементов  в  разрабатываемом  проекте  должны 
соответствовать макету на дизайне. 

  

Чтобы проверить расстояние элементов между собой, БЕЗ использования Figma Dev Mod, 
необходимо выбрать основной элемент в боковом меню: 
                                                                                                           

После  чего  зажать клавишу  Option  и  навести  курсор  на  другой  элемент.  Между  этими 
элементами появится красная линия, показывающее пиксельное расстояние между ними 

 
Запрос на правки в дизайне 

Все правки в дизайне необходимо обсуждать с PM. Если дизайн не отвечает требованиям, 
в  дизайне  не  хватает  определенного  элемента  или  наоборот  есть  что-то  лишнее,  нужно 
сообщить об этом вашему  ПМ-у. 

 
 

Дополнительная информация 

  

     Предложения в стиле "давайте уберем часть функционала" ПМами не принимаются 
      без апрува от БА. 
  

     Если есть вопросы о макете, ВСЁ пишите ПМу в Discord для того, чтобы избежать 
      ненужных правок. 

 

Чек-лист при работе с дизайном 

 

Шрифты, которые используются в Figma можно взять по ссылке 

Проверка полученного дизайна: 

  Реализованы все экраны по логике исходного приложении 

  Показана логика переходов между экранами 

  Наличие Design “UI Kit” (набора всех элементов дизайна) 

  Наличие в Figma вкладки “Tablet” (адаптация дизайна под планшеты) 

  Есть необходимые алерты: 

        ”Лоадер” 

        ”Удалить персонажа” (если есть Эдитор) 

        ”Выход из редактора без сохранения персонажа” (если есть Эдитор) 

        ”Сохранено” 

        ”Потеряно соединение с интернетом” ИЛИ “Нет интернет соединения” 

  

Сверка работы с дизайном: 

  Все элементы в дизайне (иконки, кастомные элементы, фоны и т.д.) скачано в хорошем 
качестве. 

  все иконки в формате .png х4. 

  Размеры элементов адаптируются в зависимости от размеров девайса. 
  Произведена адаптация под планшет 

  Все отступы соблюдены 

  Все шрифты имеют соответствующий размер и категории (Medium, light, bold) 

  Адаптации  под  планшеты  реализована  согласно  вкладке  figma  “Tablet”,  а  не  через 
Autolayout 

  

*Если замечаете плохое качество, нужно сообщить об этом вашему PM. 

  

Закругления 

  Все закругления в элементах дизайна идентичны тем, что в макете фигмы. 

  
Тестирование (QA) 

  

Когда функционал готов к тестированию: 

  

   1. Разработчик должен отправить ipa/apk файл (Туториал по созданию IPA файлов тут 
      Создание IPA-файла.mov, дополнительная ссылка), своему  ПМу , а также сообщить 
      о готовности проекта к тестированию. ПМ должен запустить IPA    файл и проверить 
      на  наличие  видимых  багов  при  первой  итерации  тестирования.  При  повторной 
      итерации  тестирования  ПМ  проверяет  баг  репорт,  сравнивая  скриншоты  багов 
      от  QA и скриншоты от разработчика, проверяя, что все баги были исправлены, после 
      чего перевести задачу из статусов To Do / In progress, в статус “QA. 

   2. В вашей задаче должна либо создаться подзадача на тестирование, либо изменится 
      статус существующей на “To Do” 

   3. Если  не  удается  двигать  статус,  обязательно  обратись  к  вашему  Project  Manager. 
      Только вы ответственны за статус задачи на  доске. QA команда не поставит ваш 
      проект в очередь тестирования, пока их подзадача не будет иметь соответствующий 
      статус. 
  

Когда тестирование не находит багов в приложении, либо по проекту больше нет “Dev” 
багов (баги по части кода проекта),  – подзадача тестирования переходит в статус Done и 
проект  отправляют  на  апрув.  (ваша  задача  на  разработку  в  Jira  переходит  в  статус  PM 
Approve) 

  

Что нужно проверить перед передачей проекта на тестирование: 

  

  Проект на 100% идентичен макету 

  Интерфейс  адаптируется  ко  всем  необходимым  размерам  экрана,  в  том  числе  числе 
планшетов 

  Категории персонажа (Layers) применяются в правильном порядке (если есть Эдитор) 

  Все элементы имеют хорошее качество и правильный формат файла 

  Все алерты отрабатывают правильно  

  Отсутствуют дабл тапы 

  Меню можно закрыть и открыть в зависимости от дизайна 

  Пользователь ВСЕГДА  имеет возможность редактировать и  удалять  персонажа.  (для 
игрового сегмента, если есть Эдитор) 

  При редактировании существующего персонажа программа не создает копию в списке 
персонажей. (для игрового сегмента, если есть Эдитор) 

  По умолчанию категория “favorites” пуста. (для игрового сегмента) 

  В айтемах с длинным текстом работает вертикальный скролл 

  “Recommended” работает горизонтальный скролл. (для игрового сегмента) 

  Блоки не наезжают друг на друга 

  Каждый текст на каждом экране не содержит грамматических ошибок. (Тексты в дизайне 
могут иметь грамматические ошибки) 
 

Мы сделали следующий пайплайн перехода на тестирование: 

   1. Когда  во  время  внутреннего  тестирования в  Баг  репорте от  QA  остается менее  3 
      багов,  можете  начинать  прохождение  сервиса  AppRefactoring.  В  таком  случае  вы 
      одновременно отправляете  новый  билд  с  исправленными ошибками  и  закрываете 
      этап рефакторинга проекта. 

   2. После того как QA подтверждает отсутствие ошибок (переводит Sub-Task в статус 
      Done),  ваша  задача  переходит  в  статус  “PM  Approve”.  На  этом  статусе  проект 
      проверяется по очереди, сначала ваш ПМ, потом БА. 

   3. После  сдачи  проекта,  запросите  у  ПМ  следующий  проект.  Однако  если  будут 
      обнаружены  баги,  то  приоритетным  будет  фикс  первого  проекта  при  сохранении 
      сроков выполнения нового. 

  

     Во  всех  проектах  должен  быть  реализован  FirebaseAnalytics  и  GoogleService-
      Info.plist 

     Когда отправляете проект на тест, нужно залить его на AppRefactoring не 

удаляя из проекта НИЧЕГО  

  

App Refactoring 

* Обязательно для ознакомления перед началом работы над проектом. 

Каждый проект  должен проходить проверку на  уникальность. Для этого мы используем 
сервис App Refactoring. Инструкция по использованию доступна по этой ссылке. 

  

Дополнительные правила рефакторинга: 

  

  General intersections все пункты должны быть не более 10%  

  Intersections не более 5% с другими проектами 
  Уникальные  методы,  файлы,  лучше  рефакторить.  Нельзя  допускать  связь  с 
оригинальным проектом. 

  

* NOTE! 

  

     Архивы нужно заливать в Team iOS_A/Team Android_A/Team Unity_A 

  

     Обратите  внимание  на  название  вашего  архива.  Он  всегда  должен  называться 
      одинаково,  иначе  сервис  продублирует  ваш  проект  в  новый  айтем  и  будет  100% 
      совпадений.  Если  все  же  ошиблись – напишите  вашему  ПМу  для  исправления 
      проблемы. 

  

     Когда отдаете архивы и ссылку на apprefactrrng на финальное тестирование, Update 
      date  на  сайте  должна  быть  датой отправки  на  тестирование - то  есть  надо залить 
      самую последнюю версию исходного кода перед сдачей проекта 
